-- /- -----------------------------------------------------------------------
-- Examples of W-types in LeanCat.
-- ----------------------------------------------------------------------- -/

-- import .s2_depprod

-- namespace qp

-- open stdaux

-- universe variables ℓ ℓobjx ℓhomx




-- /- -----------------------------------------------------------------------
-- Some homs to experiment with.
-- ----------------------------------------------------------------------- -/

-- /-! #brief Giver of the option type and ℕ.
-- -/
-- definition LeanCat.one_into_two
--     : LeanCat.{ℓ}^.hom punit (Lean.LevelMax bool)
-- := λ u, Lean.LevelMax.lift bool.tt

-- /-! #brief Giver of the list type.
-- -/
-- definition LeanCat.some
--     (X : LeanCat.{ℓ}^.obj)
--     : LeanCat.{ℓ}^.hom
--         X
--         (option X)
-- := option.some



-- /- -----------------------------------------------------------------------
-- The natural numbers.
-- ----------------------------------------------------------------------- -/

-- definition LeanCat.one_into_two.HasWType.structure
--     : (LeanCat.PolyEndoFun LeanCat.one_into_two)^.obj (Lean.LevelMax ℕ)
--       → Lean.LevelMax ℕ
-- | (sigma.mk (Lean.LevelMax.lift bool.ff) d)
-- := Lean.LevelMax.lift nat.zero
-- | (sigma.mk (Lean.LevelMax.lift bool.tt) d)
-- := Lean.LevelMax.lift
--     (nat.succ (Lean.LevelMax.unlift
--       (ListProd.π _
--         { val := 1, is_lt := cast (by trivial) (@fin_of 0 1)^.is_lt}
--         ((d { val := punit.star, property := rfl })^.val)^.val)))

-- definition LeanCat.one_into_two.HasWType.mediate
--     (ty : LeanCat.{ℓ}^.obj)
--     (h : (LeanCat.PolyEndoFun LeanCat.one_into_two)^.obj ty → ty)
--     : ℕ → ty
-- | 0 := h { fst := Lean.LevelMax.lift bool.ff
--          , snd := λ b, false.rec_on _
--                         begin
--                           cases b with b ω,
--                           cases b,
--                           cases ω
--                         end
--          }
-- | (nat.succ n) := h { fst := Lean.LevelMax.lift bool.tt
--                     , snd := λ b, { val := { val := prod.mk punit.star (LeanCat.one_into_two.HasWType.mediate n)
--                                            , property := λ m, punit.uniq _ _
--                                            }
--                                   , property := punit.uniq _ _
--                                   }
--                     }

-- /-! #brief ℕ is the W-Type associated to one_into_two.
-- -/
-- instance LeanCat.one_into_two.HasWType
--     : @HasWType LeanCat.{ℓ}
--         LeanCat.HasFinal
--         LeanCat.HasDepProd
--         LeanCat.HasAllPullbacks
--         _ _ LeanCat.one_into_two
-- := @HasWType.show LeanCat.{ℓ}
--      LeanCat.HasFinal
--      LeanCat.HasDepProd
--      LeanCat.HasAllPullbacks
--      _ _ LeanCat.one_into_two
--      (Lean.LevelMax ℕ)
--      LeanCat.one_into_two.HasWType.structure
--      (λ ty h n, LeanCat.one_into_two.HasWType.mediate ty h (Lean.LevelMax.unlift n))
--      (λ ty' hom'
--       , sorry)
--      (λ ty' hom' h ωh
--       , sorry)

-- /-! #brief The carrier of our new ℕ type.
-- -/
-- definition LeanCat.one_into_two.carr
--     : LeanCat.{ℓ}^.obj
-- := @wtype.carr LeanCat.{ℓ}
--       LeanCat.HasAllFinProducts
--       LeanCat.HasFinal
--       LeanCat.HasDepProd
--       LeanCat.HasAllPullbacks
--       _ _ LeanCat.one_into_two
--       LeanCat.one_into_two.HasWType

-- /-! #brief The structure hom for our ℕ type.
-- -/
-- definition LeanCat.one_into_two.hom
--     : LeanCat.{ℓ}^.hom
--         ((LeanCat.PolyEndoFun LeanCat.one_into_two)^.obj LeanCat.one_into_two.carr)
--         LeanCat.one_into_two.carr
-- := @wtype.hom LeanCat.{ℓ}
--       LeanCat.HasAllFinProducts
--       LeanCat.HasFinal
--       LeanCat.HasDepProd
--       LeanCat.HasAllPullbacks
--       _ _ LeanCat.one_into_two
--       LeanCat.one_into_two.HasWType

-- /-! #brief The zero map.
-- -/
-- definition LeanCat.one_into_two.Zero
--     : LeanCat.{ℓ}^.hom
--         (@final LeanCat.{ℓ} LeanCat.HasFinal)
--         LeanCat.one_into_two.carr
-- := λ u, LeanCat.one_into_two.hom
--          { fst := Lean.LevelMax.lift ff
--          , snd := λ b, begin
--                          cases b with u ωu,
--                          cases u, cases ωu
--                        end
--          }

-- /-! #brief The succ map.
-- -/
-- definition LeanCat.one_into_two.Succ
--     : LeanCat.{ℓ}^.hom
--         LeanCat.one_into_two.carr
--         LeanCat.one_into_two.carr
-- := λ u, LeanCat.one_into_two.hom
--          { fst := Lean.LevelMax.lift tt
--          , snd := λ b, { val := { val := (punit.star, u)
--                                 , property := λ m, punit.uniq _ _
--                                 }
--                        , property := punit.uniq _ _
--                        }
--          }

-- /-! #brief Zero really is zero.
-- -/
-- example : LeanCat.one_into_two.Zero punit.star
--            = Lean.LevelMax.lift nat.zero
--   := begin trivial end

-- /-! #brief Succ really is succ.
-- -/
-- example : ∀ n, LeanCat.one_into_two.Succ (Lean.LevelMax.lift n)
--                  = Lean.LevelMax.lift (nat.succ n)
--   := λ n, begin trivial end



-- /- -----------------------------------------------------------------------
-- Lists.
-- ----------------------------------------------------------------------- -/

-- definition LeanCat.some.HasWType.structure
--     (X : LeanCat.{ℓ}^.obj)
--     : (LeanCat.PolyEndoFun (LeanCat.some X))^.obj (list X)
--       → list X
-- | (sigma.mk option.none prd) := []
-- | (sigma.mk (option.some x) prd)
-- := x :: (((prd { val := x, property := rfl })^.val)^.val)^.snd

-- definition LeanCat.some.HasWType.mediate
--     (X : LeanCat.{ℓ}^.obj)
--     (ty : LeanCat.{ℓ}^.obj)
--     (h : (LeanCat.PolyEndoFun (LeanCat.some X))^.obj ty → ty)
--     : list X → ty
-- | [] := h { fst := option.none
--          , snd := λ b, false.rec_on _
--                         begin
--                           cases b with b ω,
--                           cases ω
--                         end
--          }
-- | (x :: xx) := h { fst := option.some x
--                  , snd := λ b, { val := { val := prod.mk x (LeanCat.some.HasWType.mediate xx)
--                                         , property := λ m, punit.uniq _ _
--                                         }
--                                , property := begin
--                                                cases b with x' ωxx',
--                                                assert ωxx'' : x' = x,
--                                                { apply option.some.inj, apply ωxx' },
--                                                subst ωxx'',
--                                                trivial
--                                              end
--                                }
--                  }

-- /-! #brief ℕ is the W-Type associated to some.
-- -/
-- instance LeanCat.some.HasWType
--     (X : LeanCat.{ℓ}^.obj)
--     : @HasWType LeanCat.{ℓ}
--         LeanCat.HasFinal
--         LeanCat.HasDepProd
--         LeanCat.HasAllPullbacks
--         _ _ (LeanCat.some X)
-- := @HasWType.show LeanCat.{ℓ}
--      LeanCat.HasFinal
--      LeanCat.HasDepProd
--      LeanCat.HasAllPullbacks
--      _ _ (LeanCat.some X)
--      (list X)
--      (LeanCat.some.HasWType.structure X)
--      (λ ty h n, LeanCat.some.HasWType.mediate X ty h n)
--      (λ ty' hom'
--       , sorry)
--      (λ ty' hom' h ωh
--       , sorry)

-- /-! #brief The carrier of our new list type.
-- -/
-- definition LeanCat.some.carr
--     (X : LeanCat.{ℓ}^.obj)
--     : LeanCat.{ℓ}^.obj
-- := @wtype.carr LeanCat.{ℓ}
--       LeanCat.HasAllFinProducts
--       LeanCat.HasFinal
--       LeanCat.HasDepProd
--       LeanCat.HasAllPullbacks
--       _ _ (LeanCat.some X)
--       (LeanCat.some.HasWType X)

-- /-! #brief The structure hom for our list type.
-- -/
-- definition LeanCat.some.hom
--     (X : LeanCat.{ℓ}^.obj)
--     : LeanCat.{ℓ}^.hom
--         ((LeanCat.PolyEndoFun (LeanCat.some X))^.obj (LeanCat.some.carr X))
--         (LeanCat.some.carr X)
-- := @wtype.hom LeanCat.{ℓ}
--       LeanCat.HasAllFinProducts
--       LeanCat.HasFinal
--       LeanCat.HasDepProd
--       LeanCat.HasAllPullbacks
--       _ _ (LeanCat.some X)
--       (LeanCat.some.HasWType X)

-- /-! #brief The empty list.
-- -/
-- definition LeanCat.some.Nil
--     (X : LeanCat.{ℓ}^.obj)
--     : LeanCat.{ℓ}^.hom
--         (@final LeanCat.{ℓ} LeanCat.HasFinal)
--         (LeanCat.some.carr X)
-- := λ u, LeanCat.some.hom X
--          { fst := option.none
--          , snd := λ b, begin
--                          cases b with u ωu,
--                          cases ωu
--                        end
--          }

-- /-! #brief The cons function.
-- -/
-- definition LeanCat.some.Cons
--     (X : LeanCat.{ℓ}^.obj)
--     (x : X)
--     : LeanCat.{ℓ}^.hom
--         (LeanCat.some.carr X)
--         (LeanCat.some.carr X)
-- := λ xx, LeanCat.some.hom X
--           { fst := option.some x
--           , snd := λ b, { val := { val :=  (x, xx)
--                                  , property := λ m, punit.uniq _ _
--                                  }
--                         , property := begin
--                                         cases b with x' ωxx',
--                                         assert ωxx'' : x' = x,
--                                         { apply option.some.inj, apply ωxx' },
--                                         subst ωxx'',
--                                         trivial
--                                       end
--                         }
--           }

-- /-! #brief Nil really is nil.
-- -/
-- example (X : LeanCat.{ℓ}^.obj)
--     : LeanCat.some.Nil X punit.star
--            = []
--   := begin trivial end

-- /-! #brief Cons really is cons.
-- -/
-- example (X : LeanCat.{ℓ}^.obj)
--     (x : X)
--     : ∀ xx, LeanCat.some.Cons X x xx
--                  = x :: xx
--   := λ n, begin trivial end

-- end qp
